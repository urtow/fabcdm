# По умолчаню все поля считаются Nullable=False, если не указано обратное

user:
  id: int, pk
  # Login and other - later

card_collection:
  id: int, pk
  name: CHAR(64), index
  # One user may have more that one collection, but collection ALWAYS have one owner
  user_id: int, fk, index
  exists: bool, index
  description: CHAR(256), default=""
  created_at: dt, index
  updated_at: dt, index
  terminated_at: dt, index, nullable
  binders_id: list[int], fk

binder:
  id: int, pk
  name: CHAR(64), index
  description: CHAR(256), default=""
  created_at: dt, index
  updated_at: dt, index
  terminated_at: dt, index, nullable
  # Collection may have any number of binders, binder may be owned only by ONE collection
  card_collection_id: int, fk
  cards_id: list[int], fk

deck_collection:
  id: int, pk
  name: CHAR(64), index
  user_id: int, fk
  description: CHAR(256), default=""
  created_at: dt, index
  updated_at: dt, index
  terminated_at: dt, index, nullable
  decks_id: list[int], fk

deck:
  id: int, pk
  format_id: int, fk
  hero_card_id: int, fk
  version_name: char(16), default="latest"
  prev_version_id: int, fk, index
  visibility: enum[public, link, private], index
  name: CHAR(64), index
  description: CHAR(256), default=""
  created_at: dt, index
  updated_at: dt, index
  terminated_at: dt, index, nullable
  main_cards_id: list[int], fk
  inventory_cards_id: list[int], fk
  token_cards_id: list[int], fk
  equip_cards_id: list[int], fk
  optional_cards_id: list[int], fk
  matchups_id: list[int], fk

matchup:
  id: int, fk
  name: char(16)
  prefer_first_turn: bool
  notes: CHAR(256), default=""
  include_cards_ids: list[int], fk
  exclude_cards_ids: list[int], fk 

card_price:
  id: int. pk
  card_id: int, fk
  created_at: dt, index
  store_id: int, fk
  currency_id: int, fk
  price: decimal

collection_valuate:
  id: int, pk
  created_at: dt, index
  store_id: int, fk
  currency_id: int, fk
  value: decimal
  collection_id: int, fk

binder_valuate:
  id: int, pk
  created_at: dt, index
  store_id: int, fk
  currency_id: int, fk
  value: decimal
  binder_id: int, fk

deck_valuate:
  id: int, pk
  created_at: dt, index
  store_id: int, fk
  currency_id: int, fk
  value: decimal
  deck: int, fk

ban_list:
  id: int, pk
  reason: enum(Banned, LivingLegend)
  format_id: int, fk
  cards_id: list[int], fk


# 100% static data down
# Does not change after insert
card:
  id: int, pk
  set_id: int, fk, index
  full_text: CHAR(512)
  name: CHAR(64)
  illustrator_id: int, fk, index
  collectable_number: CHAR(6), index
  languages_id: list[int], fk

  # Zero or more. Will be filtered by "in"
  # So i have no idea how create this
  # All cards types + subtypes + supertypes + keywords is less than 1000
  # So may be "reverse" key? And if we need
  # Yes for now they are 100% static, but if we assume that no....
  # Basically we will search by this fields A LOT, mostly like:
  # SELECT all cards with this types and this supertypes and....
  card_types_id: list[int], fk, index
  card_subtypes_id: list[int], fk, index
  card_supertypes_id: list[int], fk, index
  keywords_id: list[int], fk

  # Some cards MAY does not have this fields (NULL)
  # Checking of this at python. 
  pitch_value: int[0-3], nullable, index
  play_cost: int, nullable, index
  attack_value: int, nullable, index
  block_value: int, nullable, index

  # Does not need index, we NEVER search by this
  generate_tokens: list[int], pk


keyword:
  id: int, pk
  name: CHAR(16)

language:
  id: int, pk
  short_name: CHAR(4), index
  full_name: CHAR(16)

illustrator:
  id: int, pk
  name: char(64)

card_type:
  id: int, pk
  name: CHAR(64)

card_subtype:
  id: int, pk
  name: CHAR(64)

card_supertypes:
  id: int, pk
  name: CHAR(64)

set:
  id: int, pk
  short_name: CHAR(3), index
  full_name: CHAR(64), index

store:
  id: int, pk
  name: char(64)

format:
  int: id, pk
  name: char(64)

curreny:
  id: int, pk
  short_name: char(6), index
  full_name: chart(24), index
